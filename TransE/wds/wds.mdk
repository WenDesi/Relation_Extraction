[INCLUDE=presentation]
Title         : Translating Embeddings for Modeling Multi-relational Data
Sub Title     : 
Author        : Antoine Bordes, Nicolas Usunier, Alberto Garcia-Duran
Affiliation   : Universite de Technologie de Compiegne – CNRS
Email         : {bordesan, nusunier, agarciad} @ utc.fr
Reveal Theme  : sky
Beamer Theme  : singapore

[TITLE]


# Madoko Presentation
* Knowledge Bases(KBs) are massive amounts of structured data.
- Main issue: KBs are hard to manipulate.
  :* Very large dimensions
  :* Noisy/incomplete
- Here: Encode KBs in vector spaces, in which rel. are translations
  :- Simple model with few parameters designed to encode similarities:
  :- Easy to train on large-scale databases
  :- Strong results on real-world data

## Muti-relational Data
<br/>
__Knowledge Bases:__

* Each node =  an entity
* Each edge = a relation
* A Triple  = ( h, r, t )

<br/>
__Examples:__
<br/>Freebase,YAGO,IMDB,_GeneOntology_,UniprotKB,WordNet,etc.

## Embedding-based Framework
<br/>
__This work:__ Relationships = translations on entity embeddings.

* Natural representation for hierarchical relationships.
![PRE1]

[PRE1]: images/PRE1.jpg "PRE1" { width:auto; max-width:90% }


- Recent work on word embeddings
  :(Mikolov et al. 13): there may exist embedding spaces in which relationships are represented by translations.
* Few parameters to encode each relationship.

# Translating Embeddings
__Learning Representations:__

* Entities are represented by embeddings in R^k^
* Relationships = similarity operators between heads/tails.
* We learn d ( h, r, t ) = dissimilarity measure depending on r.

# Translating Embeddings
__Relationships as Translations:__

* We would like that h + r ≈ t.
* dissimilarity measure d(h,r,t), L1 or L~2~-norm
* We learn h,r and t using SGD to minimize the** ranking loss**:
~ Center
![pre2]
~

[pre2]: images/pre2.jpg "pre2" { width:auto; max-width:90% }

# Translating Embeddings
__Training Algorithm:__

![pre3]

[pre3]: images/pre3.jpg "pre3" { width:auto; max-width:100% }

## Example Predictions
这一页最后直接写html把
![pre4]

[pre5]: images/pre5.jpg "pre5" { width:auto; max-width:90% }

[pre4]: images/pre4.jpg "pre4" { width:auto; max-width:90% }

# Experiments
- Data sets
  : Wordnet, Freebase (FB15K, FB1M)<br/>
~ Center
![pre6]
~

  
  
- Evaluation protocol
  : Mean Rank, Hits@10<br/>
- Baselines
  : Unstructured, RESCAL, SE, SME(linear), SME(bilinear), LFM

[pre6]: images/pre6.jpg "pre6" { width:auto; max-width:90% }


## Reveal.js

`reveal.js` is a framework for easily creating beautiful presentations using
HTML. You'll need a browser with support for CSS 3D transforms to see it in
its full glory. 

And any Madoko features just work. Here is some math:

~ Begin Framed { padding:1ex; margin-top:1ex }
A famous equation is $e = mc^2$, but this one is 
famous too:

~ Equation  {#eq-gaussian}
\int_{-\infty}^\infty e^{-a x^2} d x = \sqrt{\frac{\pi}{a}} 
~
~ End Framed

~~ Notes
Oh hey, these are some notes. They'll be hidden in your presentation, but you
can see them if you open the speaker notes window (hit 's' on your keyboard).
~~

## Code

Here is code, highlighted by Madoko 

``` javascript
function sqr( x ) {
  var \(&pi;\) = 3.141593;
  return x*x;  /* the square */
}
```
We used `\(` and `\)` to escape into markdown to write &pi;.

<!-- Example of nested vertical slides -->
~ Begin Vertical { data-background:Gainsboro }

## Vertical Slides {#vertical}
Slides can be nested inside of other slides,
try pressing [down].

[![arrowdown]][down]


[down]: # { .navigate-down }
[arrowdown]: images/arrow.png "Down arrow" { width:178px; height:238px }

## Basement Level 1
Press down or up to navigate.

## Basement Level 2

Use `columns` to put blocks next to each other:

~ Begin Columns
~ Column { width:50% }
A monarch butterfly (shown to the right)
spends the winter in Mexico.
~
~ Column
![butterfly]
~
~ End Columns

[butterfly]: images/butterfly.png "A Monarch butterfly" { width:280px; vertical-align:middle }


<!-- 
For local background images, we need to have a reference to the image
such that it's data gets embedded into the HTML page. We define
it using "display=none" so it is hidden in the presentation. 
We can then refer to the image in "data-background-image". 
-->

![bfly]
[bfly]: images/butterfly.png "Butterfly" { display:none }

## Basement Level 3 { data-background-image:images/butterfly.png }
That's it, time to go back up.

[![arrowup]][back2]

[arrowup]:  images/arrow.png "Up arrow" { width:178px; height:238px; transform:rotate(180deg) }
[back2]:    #vertical { .image }

~ End Vertical


## Themes {#themes}

Reveal.js comes with a few themes built in:

* [Default](?#/themes)
* [Sky](?theme=sky#/themes)
* [Beige](?theme=beige#/themes)
* [Serif](?theme=serif#/themes)
* [Simple](?theme=simple#/themes)
* [Night](?theme=night#/themes)
* [Moon](?theme=moon#/themes)
* [Solarized](?theme=solarized#/themes)

Theme demos are loaded after the presentation which leads to flicker. In
production you should load your theme in the `<head>` using a
`<link>`.

## Transitions { #transitions }

You can select from different transitions, like:\
[Cube](?transition=cube#/transitions) -
[Page](?transition=page#/transitions) -
[Concave](?transition=concave#/transitions) -
[Zoom](?transition=zoom#/transitions) -
[Linear](?transition=linear#/transitions) -
[Fade](?transition=fade#/transitions) -
[None](?transition=none#/transitions) -
[Default](?#/transitions)



## Pauses?

Some pauses.

* {.fragment} One
* {.fragment} Two
* {.fragment} Three

And more:

- Test 1
- Test 2
- Test 3
{.fragmented}

Cool!.

~ Slide
A slide with no header
~


## Point of View

In Reveal.js Press **ESC** to enter the slide overview.

Hold down alt and click on any element to zoom in on it using 
 [zoom.js]. Alt + click anywhere to zoom back out.


[zoom.js]: http://lab.hakim.se/zoom-js


## Works in Mobile Safari

Try it out! You can swipe through the slides and pinch your way to the
overview.


## Printing

You can print a `revealjs` presentation nicely from the browser.

First give the `?print-pdf` or `?print-paper` query on your final
presentation (in the browser address bar) and then print from the Chrome
browser selecting `Save to PDF`.

Read more about it at the [revealjs documentation](https://github.com/hakimel/reveal.js#pdf-export)

## RevealJS library

Normally, the `revealjs` library is loaded from a CDN but you can specify your
own url using metadata:

    Reveal Url: <my url>

This can be useful when using a [server to run revealjs](https://github.com/hakimel/reveal.js#full-setup)
where you may use something like:

    @nopreview Reveal Url: http://localhost:8000/reveal.js


## Thanks for looking :-)

[slide]: http://research.microsoft.com/en-us/um/people/daan/madoko/samples/slidedemo/out/slidedemo.html
[slide-mdk]: https://www.madoko.net/editor.html?#url=http://research.microsoft.com/en-us/um/people/daan/madoko/samples/slidedemo/slidedemo.mdk&options={"delayedUpdate":"true"}
[slide-pdf]: http://research.microsoft.com/en-us/um/people/daan/madoko/samples/slidedemo/out/slidedemo.pdf
